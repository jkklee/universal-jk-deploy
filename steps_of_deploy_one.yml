---
- hosts: "{{ dest_hosts }}"  #业务主机(集群)
  any_errors_fatal: true
  serial: "{{ batch }}"
  vars:  #在upstream.conf中唯一标识一个后端服务节点(ip:port or hostname:port)
    ip_port: '{{ ansible_facts["eth0"]["ipv4"]["address"] }}:{{ project_port }}'
    host_port: '{{ ansible_facts["hostname"] }}:{{ project_port }}'
  #remote_user: "{{ run_user }}"

  tasks:
    - name: make dest dir on dest_host
      remote_user: "{{ run_user }}"
      shell: "[[ ! -e  {{ dest_dir }} ]] && mkdir -p {{ dest_dir }} || /bin/true"

    - name: Rsync update to dest server
      synchronize: 
        src: "{{ src }}"
        dest: "{{ dest }}"
        delete: yes

    - block:
        - name: Detect backend server numbers [decide whether kickout it or not]
          shell: egrep -C 5 "({{ ip_port }}|{{ host_port }})" {{ nginx_upstream_conf_local }} |awk '{printf($0," ")}'|egrep -o "{[^}]*({{ ip_port }}|{{ host_port }})[^{]*"|grep -wo {{ project_port }}|wc -l  #兼容ip:port和hostname:port形式
          #delegate_to: localhost  #委托本机来做
          register: num
        - name: Kickout [{{ host_port }}] from [{{ nginx_hosts_group }}] [modify upstream.conf with sed and check (conf) and reload nginx(with 5s sleep)]
          shell: /bin/sh {{ script_path }}/nginx_switch.sh kickout {{ nginx_hosts_group }} {{ nginx_upstream_conf_remote }} {{ ip_port }} {{ host_port }} && sleep 5
          when: num.stdout.strip('\n')|int > 1
          register: result
        - name: The previous task's stdout
          debug:
            var: result.stdout_lines
          when: result is not skipped
        - name: The previous task's stderr
          debug:
            var: result.stderr_lines
          when: result is not skipped
      when: nginx_upstream_conf_remote is defined
      delegate_to: localhost  #委托本机来做

    - name: Stop service {{ host_port }}(and sleep a specified time)
      remote_user: "{{ run_user }}"
      shell: "{{ stop_command }}"
      when: stop_command is defined
      register: result
    - name: The previous task's stdout
      debug:
        var: result.stdout_lines
    - name: The previous task's stderr
      debug:
        var: result.stderr_lines

    - name: Start service {{ host_port }}
      remote_user: "{{ run_user }}"
      shell: "{{ start_command }}"
      when: start_command is defined
      register: result
    - name: The previous task's stdout
      debug:
        var: result.stdout_lines
    - name: The previous task's stderr
      debug:
        var: result.stderr_lines

    - name: "check_url [http://{{ inventory_hostname }}:{{ project_port }}/{{ check_url}}] for living in every {{ check_url_interval }}s"
      shell: "curl -I -m 1 -o /dev/null -s -w %{http_code} http://{{ inventory_hostname }}:{{ project_port }}/{{ check_url }}"
      register: result
      until: result.stdout in ['200','301']
      delegate_to: localhost  #委托本机来做
      retries: "{{ check_url_retries }}"
      delay: "{{ check_url_interval }}"
      when: result.stderr == ""

    - block:
        - name: Rejoin [{{ host_port }}] from [{{ nginx_hosts_group }}] [modify upstream.conf with sed and check (conf) and reload nginx]
          shell: /bin/sh {{ script_path }}/nginx_switch.sh rejoin {{ nginx_hosts_group }} {{ nginx_upstream_conf_remote }} {{ ip_port }} {{ host_port }}
          #delegate_to: localhost  #委托本机来做
          when:
            - num.stdout.strip('\n')|int > 1
            - result is succeeded
          register: result
        - name: The previous task's stdout
          debug:
            var: result.stdout_lines
        - name: The previous task's stderr
          debug:
            var: result.stderr_lines
      when: nginx_upstream_conf_remote is defined
      delegate_to: localhost  #委托本机来做
